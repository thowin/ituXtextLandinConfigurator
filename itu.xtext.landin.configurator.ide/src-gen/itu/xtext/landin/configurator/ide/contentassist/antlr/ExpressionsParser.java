/*
 * generated by Xtext 2.10.0
 */
package itu.xtext.landin.configurator.ide.contentassist.antlr;

import com.google.inject.Inject;
import itu.xtext.landin.configurator.ide.contentassist.antlr.internal.InternalExpressionsParser;
import itu.xtext.landin.configurator.services.ExpressionsGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ExpressionsParser extends AbstractContentAssistParser {

	@Inject
	private ExpressionsGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalExpressionsParser createParser() {
		InternalExpressionsParser result = new InternalExpressionsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getSepAccess().getAlternatives(), "rule__Sep__Alternatives");
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getBinopAccess().getAlternatives(), "rule__Binop__Alternatives");
					put(grammarAccess.getConfiguratorAccess().getGroup(), "rule__Configurator__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_1(), "rule__Expression__Group_0_1__0");
					put(grammarAccess.getParenthesisExpressionAccess().getGroup(), "rule__ParenthesisExpression__Group__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup(), "rule__AtomicExpression__Group__0");
					put(grammarAccess.getAtomicExpressionAccess().getGroup_1(), "rule__AtomicExpression__Group_1__0");
					put(grammarAccess.getFreeTextAccess().getGroup(), "rule__FreeText__Group__0");
					put(grammarAccess.getFreeTextAccess().getGroup_1(), "rule__FreeText__Group_1__0");
					put(grammarAccess.getSepAccess().getGroup_1(), "rule__Sep__Group_1__0");
					put(grammarAccess.getModelAccess().getConfiguratorAssignment(), "rule__Model__ConfiguratorAssignment");
					put(grammarAccess.getConfiguratorAccess().getTitleAssignment_0(), "rule__Configurator__TitleAssignment_0");
					put(grammarAccess.getConfiguratorAccess().getExpressionAssignment_1(), "rule__Configurator__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAccess().getLeftAssignment_0_0(), "rule__Expression__LeftAssignment_0_0");
					put(grammarAccess.getExpressionAccess().getOperationAssignment_0_1_0(), "rule__Expression__OperationAssignment_0_1_0");
					put(grammarAccess.getExpressionAccess().getRightAssignment_0_1_1(), "rule__Expression__RightAssignment_0_1_1");
					put(grammarAccess.getExpressionAccess().getParanthesisAssignment_1(), "rule__Expression__ParanthesisAssignment_1");
					put(grammarAccess.getAtomicExpressionAccess().getNameAssignment_0(), "rule__AtomicExpression__NameAssignment_0");
					put(grammarAccess.getFreeTextAccess().getNameAssignment_0(), "rule__FreeText__NameAssignment_0");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalExpressionsParser typedParser = (InternalExpressionsParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ExpressionsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
