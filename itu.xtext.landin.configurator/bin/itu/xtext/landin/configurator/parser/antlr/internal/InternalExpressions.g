/*
 * generated by Xtext 2.10.0
 */
grammar InternalExpressions;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package itu.xtext.landin.configurator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package itu.xtext.landin.configurator.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import itu.xtext.landin.configurator.services.ExpressionsGrammarAccess;

}

@parser::members {

 	private ExpressionsGrammarAccess grammarAccess;

    public InternalExpressionsParser(TokenStream input, ExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getConfiguratorConfiguratorParserRuleCall_0());
			}
			lv_configurator_0_0=ruleConfigurator
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"configurator",
					lv_configurator_0_0,
					"itu.xtext.landin.configurator.Expressions.Configurator");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleConfigurator
entryRuleConfigurator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfiguratorRule()); }
	iv_ruleConfigurator=ruleConfigurator
	{ $current=$iv_ruleConfigurator.current; }
	EOF;

// Rule Configurator
ruleConfigurator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorAccess().getTitleTitleParserRuleCall_0_0());
				}
				lv_title_0_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorRule());
					}
					set(
						$current,
						"title",
						lv_title_0_0,
						"itu.xtext.landin.configurator.Expressions.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConfiguratorAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfiguratorRule());
					}
					add(
						$current,
						"expression",
						lv_expression_1_0,
						"itu.xtext.landin.configurator.Expressions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current; }
	EOF;

// Rule Title
ruleTitle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTitleAccess().getFreeTextParserRuleCall());
	}
	this_FreeText_0=ruleFreeText
	{
		$current = $this_FreeText_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getLeftAtomicExpressionParserRuleCall_0_0_0());
					}
					lv_left_0_0=ruleAtomicExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"left",
							lv_left_0_0,
							"itu.xtext.landin.configurator.Expressions.AtomicExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getOperationOperationParserRuleCall_0_1_0_0());
						}
						lv_operation_1_0=ruleOperation
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							add(
								$current,
								"operation",
								lv_operation_1_0,
								"itu.xtext.landin.configurator.Expressions.Operation");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_0_1_1_0());
						}
						lv_right_2_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							add(
								$current,
								"right",
								lv_right_2_0,
								"itu.xtext.landin.configurator.Expressions.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getParanthesisParenthesisExpressionParserRuleCall_1_0());
				}
				lv_paranthesis_3_0=ruleParenthesisExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"paranthesis",
						lv_paranthesis_3_0,
						"itu.xtext.landin.configurator.Expressions.ParenthesisExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesisExpressionRule()); }
	iv_ruleParenthesisExpression=ruleParenthesisExpression
	{ $current=$iv_ruleParenthesisExpression.current; }
	EOF;

// Rule ParenthesisExpression
ruleParenthesisExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleAtomicExpression
entryRuleAtomicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicExpressionRule()); }
	iv_ruleAtomicExpression=ruleAtomicExpression
	{ $current=$iv_ruleAtomicExpression.current; }
	EOF;

// Rule AtomicExpression
ruleAtomicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAtomicExpressionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAtomicExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getAtomicExpressionAccess().getSepParserRuleCall_1_0());
			}
			ruleSep
			{
				afterParserOrEnumRuleCall();
			}
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getAtomicExpressionAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleFreeText
entryRuleFreeText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFreeTextRule()); }
	iv_ruleFreeText=ruleFreeText
	{ $current=$iv_ruleFreeText.current; }
	EOF;

// Rule FreeText
ruleFreeText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFreeTextAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFreeTextRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_WS_1=RULE_WS
			{
				newLeafNode(this_WS_1, grammarAccess.getFreeTextAccess().getWSTerminalRuleCall_1_0());
			}
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getFreeTextAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleSep
entryRuleSep returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSepRule()); }
	iv_ruleSep=ruleSep
	{ $current=$iv_ruleSep.current.getText(); }
	EOF;

// Rule Sep
ruleSep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSepAccess().getCommaKeyword_0());
		}
		    |
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSepAccess().getCommaKeyword_1_0());
			}
			this_WS_2=RULE_WS
			{
				$current.merge(this_WS_2);
			}
			{
				newLeafNode(this_WS_2, grammarAccess.getSepAccess().getWSTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current.getText(); }
	EOF;

// Rule Operation
ruleOperation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperationAccess().getBinopParserRuleCall_0());
		}
		this_Binop_0=ruleBinop
		{
			$current.merge(this_Binop_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperationAccess().getUnopParserRuleCall_1());
		}
		this_Unop_1=ruleUnop
		{
			$current.merge(this_Unop_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBinop
entryRuleBinop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinopRule()); }
	iv_ruleBinop=ruleBinop
	{ $current=$iv_ruleBinop.current.getText(); }
	EOF;

// Rule Binop
ruleBinop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='and'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getAndKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getOrKeyword_1());
		}
		    |
		kw='equals'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getEqualsKeyword_2());
		}
		    |
		kw='requires'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getRequiresKeyword_3());
		}
		    |
		kw='is'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getIsKeyword_4());
		}
		    |
		kw='are'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getAreKeyword_5());
		}
		    |
		kw='excludes'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinopAccess().getExcludesKeyword_6());
		}
	)
;

// Entry rule entryRuleUnop
entryRuleUnop returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnopRule()); }
	iv_ruleUnop=ruleUnop
	{ $current=$iv_ruleUnop.current.getText(); }
	EOF;

// Rule Unop
ruleUnop returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='not'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUnopAccess().getNotKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
