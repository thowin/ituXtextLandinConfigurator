/*
 * generated by Xtext 2.10.0
 */
package itu.xtext.landin.configurator.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Model");
		private final Assignment cConfiguratorAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConfiguratorConfiguratorParserRuleCall_0 = (RuleCall)cConfiguratorAssignment.eContents().get(0);
		
		//Model:
		//	configurator+=Configurator;
		@Override public ParserRule getRule() { return rule; }
		
		//configurator+=Configurator
		public Assignment getConfiguratorAssignment() { return cConfiguratorAssignment; }
		
		//Configurator
		public RuleCall getConfiguratorConfiguratorParserRuleCall_0() { return cConfiguratorConfiguratorParserRuleCall_0; }
	}
	public class ConfiguratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Configurator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTitleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTitleTitleParserRuleCall_0_0 = (RuleCall)cTitleAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Configurator:
		//	title=Title expression+=Expression+;
		@Override public ParserRule getRule() { return rule; }
		
		//title=Title expression+=Expression+
		public Group getGroup() { return cGroup; }
		
		//title=Title
		public Assignment getTitleAssignment_0() { return cTitleAssignment_0; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_0_0() { return cTitleTitleParserRuleCall_0_0; }
		
		//expression+=Expression+
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Title");
		private final RuleCall cFreeTextParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Title:
		//	FreeText;
		@Override public ParserRule getRule() { return rule; }
		
		//FreeText
		public RuleCall getFreeTextParserRuleCall() { return cFreeTextParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftAtomicExpressionParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperationAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOperationOperationParserRuleCall_0_1_0_0 = (RuleCall)cOperationAssignment_0_1_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_0_1_1_0 = (RuleCall)cRightAssignment_0_1_1.eContents().get(0);
		private final Assignment cParanthesisAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParanthesisParenthesisExpressionParserRuleCall_1_0 = (RuleCall)cParanthesisAssignment_1.eContents().get(0);
		
		//Expression:
		//	left=AtomicExpression (operation+=Operation right+=Expression)* | paranthesis=ParenthesisExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//left=AtomicExpression (operation+=Operation right+=Expression)* | paranthesis=ParenthesisExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=AtomicExpression (operation+=Operation right+=Expression)*
		public Group getGroup_0() { return cGroup_0; }
		
		//left=AtomicExpression
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//AtomicExpression
		public RuleCall getLeftAtomicExpressionParserRuleCall_0_0_0() { return cLeftAtomicExpressionParserRuleCall_0_0_0; }
		
		//(operation+=Operation right+=Expression)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_0_1_0() { return cOperationAssignment_0_1_0; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_0_1_0_0() { return cOperationOperationParserRuleCall_0_1_0_0; }
		
		//right+=Expression
		public Assignment getRightAssignment_0_1_1() { return cRightAssignment_0_1_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_0_1_1_0() { return cRightExpressionParserRuleCall_0_1_1_0; }
		
		//paranthesis=ParenthesisExpression
		public Assignment getParanthesisAssignment_1() { return cParanthesisAssignment_1; }
		
		//ParenthesisExpression
		public RuleCall getParanthesisParenthesisExpressionParserRuleCall_1_0() { return cParanthesisParenthesisExpressionParserRuleCall_1_0; }
	}
	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesisExpression Expression:
		//	'(' Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class AtomicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.AtomicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSepParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AtomicExpression Expression:
		//	name=ID (Sep ID)*
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (Sep ID)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(Sep ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Sep
		public RuleCall getSepParserRuleCall_1_0() { return cSepParserRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class FreeTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.FreeText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FreeText:
		//	name=ID (WS ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (WS ID)*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(WS ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_0() { return cWSTerminalRuleCall_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Sep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Sep:
		//	',' | ',' WS;
		@Override public ParserRule getRule() { return rule; }
		
		//',' | ',' WS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//',' WS
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_1_1() { return cWSTerminalRuleCall_1_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operation:
		//	Binop | Unop;
		@Override public ParserRule getRule() { return rule; }
		
		//Binop | Unop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Binop
		public RuleCall getBinopParserRuleCall_0() { return cBinopParserRuleCall_0; }
		
		//Unop
		public RuleCall getUnopParserRuleCall_1() { return cUnopParserRuleCall_1; }
	}
	public class BinopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Binop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRequiresKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAreKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cExcludesKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//Binop:
		//	'and' | 'or' | 'equals' | 'requires' | 'is' | 'are' | 'excludes';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or' | 'equals' | 'requires' | 'is' | 'are' | 'excludes'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'equals'
		public Keyword getEqualsKeyword_2() { return cEqualsKeyword_2; }
		
		//'requires'
		public Keyword getRequiresKeyword_3() { return cRequiresKeyword_3; }
		
		//'is'
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }
		
		//'are'
		public Keyword getAreKeyword_5() { return cAreKeyword_5; }
		
		//'excludes'
		public Keyword getExcludesKeyword_6() { return cExcludesKeyword_6; }
	}
	public class UnopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "itu.xtext.landin.configurator.Expressions.Unop");
		private final Keyword cNotKeyword = (Keyword)rule.eContents().get(1);
		
		//Unop:
		//	'not';
		@Override public ParserRule getRule() { return rule; }
		
		//'not'
		public Keyword getNotKeyword() { return cNotKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final ConfiguratorElements pConfigurator;
	private final TitleElements pTitle;
	private final ExpressionElements pExpression;
	private final ParenthesisExpressionElements pParenthesisExpression;
	private final AtomicExpressionElements pAtomicExpression;
	private final FreeTextElements pFreeText;
	private final SepElements pSep;
	private final OperationElements pOperation;
	private final BinopElements pBinop;
	private final UnopElements pUnop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConfigurator = new ConfiguratorElements();
		this.pTitle = new TitleElements();
		this.pExpression = new ExpressionElements();
		this.pParenthesisExpression = new ParenthesisExpressionElements();
		this.pAtomicExpression = new AtomicExpressionElements();
		this.pFreeText = new FreeTextElements();
		this.pSep = new SepElements();
		this.pOperation = new OperationElements();
		this.pBinop = new BinopElements();
		this.pUnop = new UnopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("itu.xtext.landin.configurator.Expressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	configurator+=Configurator;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Configurator:
	//	title=Title expression+=Expression+;
	public ConfiguratorElements getConfiguratorAccess() {
		return pConfigurator;
	}
	
	public ParserRule getConfiguratorRule() {
		return getConfiguratorAccess().getRule();
	}
	
	//Title:
	//	FreeText;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Expression:
	//	left=AtomicExpression (operation+=Operation right+=Expression)* | paranthesis=ParenthesisExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ParenthesisExpression Expression:
	//	'(' Expression ')'
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return pParenthesisExpression;
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}
	
	//AtomicExpression Expression:
	//	name=ID (Sep ID)*
	public AtomicExpressionElements getAtomicExpressionAccess() {
		return pAtomicExpression;
	}
	
	public ParserRule getAtomicExpressionRule() {
		return getAtomicExpressionAccess().getRule();
	}
	
	//FreeText:
	//	name=ID (WS ID)*;
	public FreeTextElements getFreeTextAccess() {
		return pFreeText;
	}
	
	public ParserRule getFreeTextRule() {
		return getFreeTextAccess().getRule();
	}
	
	//Sep:
	//	',' | ',' WS;
	public SepElements getSepAccess() {
		return pSep;
	}
	
	public ParserRule getSepRule() {
		return getSepAccess().getRule();
	}
	
	//Operation:
	//	Binop | Unop;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Binop:
	//	'and' | 'or' | 'equals' | 'requires' | 'is' | 'are' | 'excludes';
	public BinopElements getBinopAccess() {
		return pBinop;
	}
	
	public ParserRule getBinopRule() {
		return getBinopAccess().getRule();
	}
	
	//Unop:
	//	'not';
	public UnopElements getUnopAccess() {
		return pUnop;
	}
	
	public ParserRule getUnopRule() {
		return getUnopAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
